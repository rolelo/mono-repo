enum AdvertisingMedium {
  LinkedIn
  Indeed
  Google
}
enum FoodAndDrink {
  DRINKS
  BREAKFAST
  FRUIT
  SNACKS
  LUNCH
  DINNER
}
enum JobOperationType {
  CREATE
  UPDATE
  REVIEW
  CLOSE
}
enum JobOperationType {
  CREATE
  UPDATE
  REVIEW
  CLOSE
}
enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
  VOLUNTEER
  OTHER
}
enum ExperienceLevel {
  ENTRY_LEVEL
  MID_SENIOR_LEVEL
  DIRECTOR
  EXECUTIVE
  INTERNSHIP
  ASSOCIATE
  NOT_APPLICABLE
}
enum ListingType  {
  BASIC
  PREMIUM
}
enum ListingCurrency {
  USD
  GBP
  EUR
}
enum ApplicantStatus {
  LISTED
  REJECTED
  PENDING
}
input CreateOrganisationInput {
  name: String!
  website: String!
  companyLogo: String!
  companyDescription: String!
  email: String!
}
input UpdateApplicationStatusInput {
  jobId: String!
  userId: String!
  status: ApplicantStatus!
}
interface IListing {
  jobPostingOperationType: JobOperationType!
  title: String!
  advertisingMediums: [AdvertisingMedium]
  description: String!
  location: String!
  skillsDescription: String!
  workRemoteAllowed: Boolean
  workplaceType: String!
  employmentStatus: EmploymentStatus!
  experienceLevel: ExperienceLevel!
  expireAt: String!
  listingType: ListingType!
  currency: ListingCurrency!
  salary: Int!
}
input ListingInput  {
  organisationId: String
  jobPostingOperationType: JobOperationType!
  title: String!
  advertisingMediums: [AdvertisingMedium]
  description: String!
  location: String!
  skillsDescription: String!
  workRemoteAllowed: Boolean
  workplaceType: String!
  employmentStatus: EmploymentStatus!
  experienceLevel: ExperienceLevel!
  listingType: ListingType!
  expireAt: String!
  currency: ListingCurrency!
  salary: Int!
  rsus: Int!
  bonus: Int!
  techSkills: [String]
  numberOfHolidays: Int!
  privateHealthInsurance: Boolean
  dentalHealthInsurance: Boolean
  visionHealthInsurance: Boolean
  lifeInsurance: Boolean!
  workingHoursPerWeek: Int!
  freeFoodAndDrink: [FoodAndDrink]
  trainingAndDevelopment: Boolean!
  wellnessPackages: Boolean!
  workFromHomePackage: Boolean!
}
input JobApplicationInput {
  jobId: String!
}
input ProfileInput {
  rightToWorkInUK: String!
  rightToWorkInEU: String!
  rightToWorkInUS: String!
  cv: String!
  countryOfResidence: String!
  salaryLookingFor: Int
  techSkills: [String]
  yearsOfExperience: Int
}
type Applicant {
  id: String!
  createdDate: String!
  user: User!
  status: ApplicantStatus
}
type Organisation {
  _id: String!
  admin: User!
  name: String!
  website: String!
  companyLogo: String!
  companyDescription: String!
  email: String!
  totalPositions: Int!
  createdDate: String!
  profile: Profile
}
type Profile {
  rightToWorkInUK: String!
  rightToWorkInEU: String!
  rightToWorkInUS: String!
  cv: String
  countryOfResidence: String!
  salaryLookingFor: Int
  techSkills: [String]
  yearsOfExperience: Int
}
type User {
  id: String!
  name: String!
  email: String!
  phoneNumber: String
  organisations: [Organisation]
  profile: Profile
}
type SignedUrl {
  url: String!
  uuid: String!
  fields: String!
}
type JobApplication {
  name: String!
  email: String!
  cvUrl: String!
  jobId: String!
  createdDate: String!
}
type Listing implements IListing {
  _id: String
  organisationName: String
  organisationDescription: String
  organisationWebsite: String
  organisationLogo: String
  createdDate: String
  createdById: String
  createdByName: String
  jobPostingOperationType: JobOperationType!
  title: String!
  advertisingMediums: [AdvertisingMedium]
  description: String!
  location: String!
  skillsDescription: String!
  workRemoteAllowed: Boolean
  workplaceType: String!
  employmentStatus: EmploymentStatus!
  experienceLevel: ExperienceLevel!
  expireAt: String!
  listingType: ListingType!
  currency: ListingCurrency!
  salary: Int!
  applicants: [Applicant]
  alreadyApplied: Boolean
}
type Query {
  user: User!
  listings(organisationId: String): [Listing]
  jobApplicants(jobId: String!): [Applicant]
  clientListing(id: String!): Listing
}
type Mutation {
  createProfile(input: ProfileInput!): Profile!
  createListing(input: ListingInput!): Listing!
  createJobApplication(input: JobApplicationInput!): Applicant!
  createUser: User!
  updateUser: User!
  updateApplicantStatus(input: UpdateApplicationStatusInput!): Applicant!
  createCVS3PreSignedUrl(content: String!): SignedUrl!
  createOrganisationS3PreSignedUrl(content: String!): SignedUrl!
  createOrganisation(input: CreateOrganisationInput!): Organisation!
  deleteOrganisation(_id: String!): String!
}